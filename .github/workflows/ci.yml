name: CI

on:
  push:

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: test - ${{ matrix.target }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-22.04
            os: ubuntu
          - target: aarch64-unknown-linux-gnu
            runner: ubuntu-22.04-arm
            os: ubuntu
          - target: aarch64-apple-darwin
            runner: macos-latest
            os: macos
    runs-on: ${{ matrix.runner }}

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.13
        if: matrix.os == 'macos'
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: update apt cache on linux
        if: matrix.os == 'ubuntu'
        run: sudo apt-get update
      - name: install protoc linux
        if: matrix.os == 'ubuntu'
        run: sudo apt-get install -y protobuf-compiler
      - name: install protoc macos
        if: matrix.os == 'macos'
        run: brew install protobuf
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}
          rustflags: ""
      - uses: taiki-e/install-action@nextest
      - name: run tests
        uses: actions-rs/cargo@v1
        with:
          command: nextest
          args: run --target ${{ matrix.target }} --verbose
      - name: run test processor-sdk
        uses: actions-rs/cargo@v1
        with:
          command: nextest
          args: run --manifest-path ./rotel_python_processor_sdk/Cargo.toml --target ${{ matrix.target }}

  # Check formatting with rustfmt
  formatting:
    name: cargo fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # Ensure rustfmt is installed and setup problem matcher
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
          rustflags: ""
      - name: Rustfmt Check
        uses: actions-rust-lang/rustfmt@v1
